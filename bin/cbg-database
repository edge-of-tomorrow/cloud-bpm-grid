#!/bin/sh

source $CBG_HOME/bin/env.properties

# Cloud BPM Grid - Database

HELP="""
Usage: cbg-database COMMAND
       cbg-database --help

Database PostgreSQL for Cloud BPM Grid.

COMMANDS:
    setup \t Create persistent storage for Database and download postgres Docker image
    start \t Start PostgreSQL database in Docker container
    restart \t Restart PostgreSQL database in Docker container
    status \t Show status of PostgreSQL database
    stop \t Stop PostgreSQL database in Docker container
    clear \t Remove DB Data persistent storage
"""

case $1 in
    setup)
        echo "[Database] Setting up DB Data persistent storage..."
        if [ -d $DB_DIR ]; then
            while true; do
                read -p "[Database] Database '$DB_DIR' exists, do you wish to clean it yes/no? " yn
                case $yn in
                    [Yy]* ) echo "[Database] Remove DB_DIR=$DB_DIR"; sudo rm -rf $DB_DIR; mkdir -p -m 777 $DB_DIR; chgrp docker $DB_DIR; break;;
                    [Nn]* ) break;;
                    * ) echo "Please answer yes or no.";;
                esac
            done
        else
            mkdir -p -m 777 $DB_DIR
            chgrp docker $DB_DIR
        fi
        echo "[Database] Pulling latest PostgreSQL Docker image..."
        docker pull postgres > /dev/null 2>&1
    ;;
    build|rebuild)
        # nothing to do
    ;;
    start|restart)
        echo "[Database] Removing bpm-database Docker container..."
        docker rm -f bpm-database > /dev/null 2>&1
        echo "[Database] Starting new bpm-database Docker container in $DB_DIR..."
        docker run --privileged -p $DB_PORT:5432 --name bpm-database -e POSTGRES_DB=$DB_NAME -e POSTGRES_USER=$DB_USER -e POSTGRES_PASSWORD=$DB_PWD -e POSTGRES_ROOT_PASSWORD=rootman1234! -v $DB_DIR:/var/lib/postgresql/data -d postgres > /dev/null
        echo "- jdbc:postgresql://$DB_HOST:$DB_PORT/$DB_NAME"
        echo "[Database] Waiting 10s for the database to start"
        loops=0
        while : ; do
            isRunning=`docker ps | grep "\ postgres.*Up"`
            [[ -z "$isRunning" ]] || break
            if [ $loops == 10 ]; then
                printf "[Database] has not started yet, to see the logs run 'docker logs bpm-database'"
                break
            fi
            sleep 1
            echo -ne "[Database] ... ${loops}s passed"\\r
            ((loops++))
        done
        printf "\n"
    ;;
    status)
        isDocker=`docker images | grep "^\(docker\.io\/\)\?postgres"`
        isRunning=`docker ps | grep "\ postgres.*Up"`
        if [ -n "$isRunning" ]
        then
            echo -e "database \t\t ${CBG_BLUE}running${CBG_NC}"
        elif [ -d "$DB_DIR" ] && [ -n "$isDocker" ] ; then
            echo -e "database \t\t ${CBG_GREEN}ready to start${CBG_NC}"
        else
            echo -e "database \t\t ${CBG_RED}new (needs setup)${CBG_NC}"
        fi
    ;;
    stop)
        echo "[Database] Removing bpm-database Docker container..."
        docker rm -f bpm-database > /dev/null 2>&1
    ;;
    clear)
        echo "[Database] Removing DB Data persistent storage..."
        if [ -n "$DB_DIR" ]; then
            sudo rm -rf $DB_DIR
        fi
    ;;
    help)
    echo -e "$HELP"
    ;;
esac

