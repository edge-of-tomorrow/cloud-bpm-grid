#!/bin/sh

source $CBG_HOME/bin/env.properties

# Cloud BPM Grid - Authentication Server

HELP="""
Usage: cbg-authentication-server COMMAND
       cbg-authentication-server --help

Authentication Server KeyCloak for Cloud BPM Grid.

COMMANDS:
    setup \t Download KeyCloak Docker image
    start \t Start KeyCloak authentication server in Docker container
    import \t Import the realm defined at \$AUTH_REALM_CONF
    restart \t Restart KeyCloak authentication server in Docker container
    status \t Show status of KeyCloak
    stop \t Stop KeyCloak authentication server in Docker container
    clear \t No-op
"""

importRealm() {
        echo "[Authentication Server] Import realm '$AUTH_REALM'"
        AUTH_TOKEN=$(curl -X POST "http://$AUTH_HOST:$AUTH_PORT/auth/realms/master/protocol/openid-connect/token" \
-H "Content-Type: application/x-www-form-urlencoded" \
-d "username=$AUTH_USER" \
-d "password=$AUTH_PWD" \
-d 'grant_type=password' \
-d 'client_id=admin-cli' | grep -Po '(?<=access_token":")[^"]+')
        curl -X POST "http://$AUTH_HOST:$AUTH_PORT/auth/admin/realms" \
-H "Content-Type: application/json" \
-H "Authorization: Bearer $AUTH_TOKEN" \
-d @$AUTH_REALM_CONF > /dev/null 2>&1
}

case $1 in
    setup)
        echo "[Authentication Server] Pulling latest KeyCloak-PostgreSQL Docker image..."
        docker pull jboss/keycloak-postgres > /dev/null
    ;;
    build|rebuild)
        # nothing to do
    ;;
    start|restart)
        isDBRunning=`docker ps | grep "\ postgres.*Up"`
        if [ -n "$isDBRunning" ]
        then
            docker rm -f authentication-server > /dev/null 2>&1
            echo "[Authentication Server] Starting new authentication-server Docker container..."
            docker run -d -p $AUTH_PORT:8080 --link bpm-database:postgres -v $AUTH_REALM_CONF:/opt/jboss/keycloak.json $CBG_AUTH_VOLUME -e POSTGRES_DATABASE=$DB_NAME -e POSTGRES_USER=$DB_USER -e POSTGRES_PASSWORD=$DB_PWD -e KEYCLOAK_USER=$AUTH_USER -e KEYCLOAK_PASSWORD=$AUTH_PWD -e LDAP_TRUSTSTOREPWD=$AUTH_LDAP_TRUSTSTOREPWD --name authentication-server jboss/keycloak-postgres > /dev/null

            echo "[Authentication Server] Waiting 30s for the authentication-server to start "
            loops=0
            while : ; do
                if curl --output /dev/null --silent --head --fail "http://$AUTH_HOST:$AUTH_PORT/auth"
                then
                    break
                fi
                if [ $loops == 30 ]; then
                    printf "\n[Authentication Server] has not started yet, do 'cbg-authentication-server import' manually\n"
                    break
                fi
                sleep 1
                echo -ne "[Authentication Server] ... ${loops}s passed"\\r
                ((loops++))
            done

            if [ $loops -lt 30 ]; then
                printf "\n"
                importRealm
            fi

        else
            echo "[Authentication Server] ERROR - Database is not running!"
        fi
    ;;
    import)
        importRealm
    ;;
    open)
        if which xdg-open > /dev/null
        then
          xdg-open "http://$AUTH_HOST:$AUTH_PORT/auth"
        elif which gnome-open > /dev/null
        then
          gnome-open "http://$AUTH_HOST:$AUTH_PORT/auth"
        fi
    ;;
    status)
        isDocker=`docker images | grep "^\(docker\.io\/\)\?jboss/keycloak-postgres"`
        isDockerRunning=`docker ps | grep "jboss/keycloak-postgres"`
        if curl --output /dev/null --silent --head --fail "http://$AUTH_HOST:$AUTH_PORT/auth"
        then
            echo -e "authentication-server \t ${CBG_BLUE}running${CBG_NC}"
        elif [ -n "$isDockerRunning" ] ; then
            echo -e "authentication-server \t ${CBG_GREEN}starting${CBG_NC}"
        elif [ -n "$isDocker" ] ; then
            echo -e "authentication-server \t ${CBG_GREEN}ready to start${CBG_NC}"
        else
            echo -e "authentication-server \t ${CBG_RED}new (needs setup)${CBG_NC}"
        fi
    ;;
    stop)
        echo "[Authentication Server] Removing authentication-server Docker container..."
        docker rm -f authentication-server > /dev/null 2>&1
    ;;
    clear)
        # nothing to do
    ;;
    help)
    echo -e "$HELP"
    ;;
esac

